generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime?
  Role            Role             @default(USER)
  isEmailVerified Boolean          @default(false)
  updatedAt       DateTime?        @updatedAt
  accounts        Account[]
  decks           Deck[]           @relation("OwnsDeck")
  parties         InvitesToParty[]
  sessions        Session[]
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Deck {
  id          String    @id @default(cuid())
  name        String
  image       String?
  nbCards     Int
  commander   String?
  createdAt   DateTime  @default(now())
  nbVictories Int?      @default(0)
  nbDefeats   Int?      @default(0)
  createdBy   String
  ownerId     String
  updatedAt   DateTime? @updatedAt
  owner       User      @relation("OwnsDeck", fields: [ownerId], references: [id])
}

model Party {
  id            String           @id @default(cuid())
  name          String
  image         String?
  start         DateTime
  end           DateTime
  type          String?
  expiresAt     DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime?        @updatedAt
  ownerId       String
  invitedPeople InvitesToParty[]
}

model InvitesToParty {
  userId     String
  partyId    String
  assignedAt DateTime @default(now())
  assignedBy String
  party      Party    @relation(fields: [partyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, partyId])
}

model VerificationToken {
  token     String    @unique
  expires   DateTime
  id        String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([id, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
