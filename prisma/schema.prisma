generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id                  String          @id @default(cuid())
name                String? 
email               String?         @unique
emailVerified       DateTime?
Role                Role            @default(USER)
image               String?
isEmailVerified     Boolean         @default(false)
createdAt           DateTime?
updatedAt           DateTime?       @updatedAt
accounts            Account[]
sessions            Session[]
decks               Deck[]          @relation("OwnsDeck")
}


model Account {
  id                String        @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt
  id_token          String?
  session_state     String?
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id              String   @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @updatedAt
  sessionToken    String   @unique
  userId          String
  expires         DateTime
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Deck {
  id              String          @id @default(cuid())
  name            String
  image           String?
  nbCards         Int
  commander       String?
  nbVictories     Int?            @default(0)
  nbDefeats       Int?            @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @updatedAt
  createdBy       String
  ownerId         String      
  owner           User            @relation("OwnsDeck",fields: [ownerId], references: [id])
}

model VerificationToken {
  id              String
  token           String          @unique
  expires         DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @updatedAt

  @@unique([id, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}